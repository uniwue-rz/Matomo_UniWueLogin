<?php

/**
 * Matomo - free/libre analytics platform
 *
 * @link https://matomo.org
 * @license http://www.gnu.org/licenses/gpl-3.0.html GPL v3 or later
 */

namespace Piwik\Plugins\UniWueLogin;

use Exception;
use Piwik\Auth;
use Piwik\Container\StaticContainer;
use Piwik\Piwik;
use Piwik\Plugin;
use Piwik\Plugin\Manager;
use Piwik\Request;
use Piwik\View;

/**
 * Contains the Matomo Event overrides.
 */
class UniWueLogin extends Plugin
{
    /**
     * Register our custom events in the Matomo Event flow.
     *
     * @return void
     */
    public function registerEvents()
    {
        return [
            'Request.initAuthenticationObject' => 'authenticateFE',
            'API.Request.authenticate' => 'authenticateAPI',
            'User.isNotAuthorized' => 'isNotAuthorized',
            'Controller.Login.resetPassword' => 'disablePasswordReset',
            'Controller.Login.confirmResetPassword' => 'disablePasswordReset',
            'UniWueLogin.logout' => 'logout',
            'Login.userRequiresPasswordConfirmation' => 'disablePasswordConfirmation',
            'UsersManager.checkPassword' => 'disablePasswordCheck',
        ];
    }

    /* lifecycle */

    /**
     * Deactivate default Login plugin during activation
     * so that only this plugin is active.
     * 
     * The core doesn't seem to support multiple login plugin at the same time.
     *
     * @return void
     */
    public function activate(): void
    {
        if (Manager::getInstance()->isPluginActivated("Login")) {
            Manager::getInstance()->deactivatePlugin("Login");
        }
    }

    /**
     * Activate default Login plugin during deactivation
     * so that a login plugin is always active.
     *
     * @return void
     */
    public function deactivate(): void
    {
        if (!Manager::getInstance()->isPluginActivated("Login")) {
            Manager::getInstance()->activatePlugin("Login");
        }
    }

    /* hooks */

    /**
     * Sets our custom auth module for the frontend.
     *
     * @return void
     */
    public function authenticateFE(): void {
        $this->setAuth(new UniWueAuth());
    }

    /**
     * Sets the token auth for API requests.
     *
     * @param string|null $tokenAuth
     * @return void
     */
    public function authenticateAPI($tokenAuth): void {
        $auth = $this->getAuth();
        $auth->setLogin(null);
        $auth->setTokenAuth($tokenAuth);
    }

    /**
     * Renders a view telling the user that they are not authorized for this action.
     *
     * @return never
     */
    public function isNotAuthorized(): never {
        $view = new View('@Login/login');
        $view->infoMessage = null;
        $view->formErrors = [Piwik::translate('UniWueLogin_NotAuthorized')];
        echo($view->render());
        exit;
    }

    /**
     * Renders a view telling the user that they cannot reset their password in Matomo.
     *
     * @param [type] $parameters
     * @return void
     */
    public function disablePasswordReset(&$parameters): void {
        $login = Request::fromRequest()->getParameter('form_login', false);
        if (empty($login)) {
            return;
        }

        $view = new View('@Login/resetPassword');
        $view->infoMessage = null;
        $view->formErrors = [Piwik::translate('UniWueLogin_DisablePasswordReset')];
        echo($view->render());
        exit;
    }

    /**
     * Throws an exception if a password is checked that is not randomly generated by this plugin.
     * 
     * The check itself is a bit hacky, but we need to allow our randomly generated passwords to pass through,
     * while user generated passwords should throw an exception if they somehow manage to reach this flow step
     * (e.g. Administrators trying to change user passwords).
     *
     * @param string $password
     * @return void
     */
    public function disablePasswordCheck($password): void {
        if (strlen($password) !== 2*UniWueAuth::PASSWORD_BYTES_LENGTH) {
            throw new Exception(Piwik::translate('UniWueLogin_DisablePasswordCheck'));
        }
    }

    /**
     * Disables the password confirmation for actions that typically have higher security implications.
     * 
     * This should not be disabled, but we do not have access to the user's password to verify it and
     * we can assume that users that are authenticated and authorized by Shibboleth are legit.
     *
     * @param bool $requiresPasswordConfirmation
     * @param string $login
     * @return void
     */
    public function disablePasswordConfirmation(&$requiresPasswordConfirmation, $login): void {
        $requiresPasswordConfirmation = false;
    }

    /* utility */

    /**
     * Returns the auth from Matomo's static container.
     *
     * @return Auth
     */
    private function getAuth(): Auth {
        return StaticContainer::get('Piwik\Auth');
    }

    /**
     * Sets the provided auth in Matomo's static container.
     *
     * @param Auth $auth
     * @return void
     */
    private function setAuth(Auth $auth): void {
        Staticcontainer::getContainer()->set('Piwik\Auth', $auth);
    }
}
